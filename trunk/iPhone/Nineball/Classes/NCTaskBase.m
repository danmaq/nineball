////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
//	Nineball Library Core for iPhone	Programmed by Mc/danmaq
//		──タスク基底クラス
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#import "NCTaskBase.h"

@implementation NCTaskBase

@synthesize priority;
@synthesize pauseAvaliable;
@synthesize lockPriority;
@synthesize taskManager;
@synthesize dead;
@synthesize phaseManager;

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// コンストラクタ。
//
// return オブジェクト
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (id)init{
	self = [super init];
	if(self != nil){ _mgrPhase = [[NCPhaseManager alloc] init]; }
	return self;
}

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// デストラクタ。
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (void)dealloc{
	SAFE_RELEASE(_mgrPhase);
	SAFE_RELEASE(_mgrTask);
	[super dealloc];
}

///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// タスクを1フレーム分更新します。
//
// return このタスクが自殺する場合、YES
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (BOOL)update{
	self.phaseManager.count++;
	return self.dead;
}

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// タスクの描画を1フレーム分更新します。
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (void)draw{}

///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// タスク実行優先度を取得します。
//
// return タスク実行優先度
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (NSUInteger)priority{ return _uPriority; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// タスク実行優先度を設定します。
// lockPriorityプロパティが有効の場合、無視されます。
// !!注意!!：管理クラスに登録した後は絶対に実行優先度を変更しないでください。
//
// param value タスク実行優先度
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (void)setPriority:(NSUInteger)value{
	if(!self.lockPriority){ _uPriority = value; }
}

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// 優先度の固定が有効かどうかを取得します。
//
// return 優先度の固定が有効な場合、YES
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (BOOL)lockPriority{ return _bLockPriority; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// 優先度を固定するかどうかを設定します。
// 管理クラス登録時、自動的に真値に設定されます。
// 一度固定すると二度と解除できません。
//
// param value 優先度を固定するかどうか
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (void)setLockPriority:(BOOL)value{ _bLockPriority = _bLockPriority || value; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// 一時停止が有効かどうかを取得します。
//
// return 一時停止が有効な場合、YES
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (BOOL)pauseAvaliable{ return _bPauseAvaliable; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// 一時停止が有効かどうかを設定します。
//
// param value 優先度を固定するかどうか
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (void)setPauseAvaliable:(BOOL)value{ _bPauseAvaliable = value; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// タスク管理クラスを取得します。
//
// return タスク管理クラス
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (NCTaskManager *)taskManager{ return _mgrTask; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// タスク管理クラスを設定します。
// 管理クラス登録時、自動的に設定されます。
//
// param value タスク管理クラス
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (void)setTaskManager:(NCTaskManager *)value{ _mgrTask = value; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// 次フレームまでに自殺するかどうかを取得します。
//
// return 次フレームまでに自殺する場合、YES
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (BOOL)dead{ return _bDead; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// 次フレームまでに自殺するかどうかを設定します。
// 実際の自殺タイミングは該当タスクのupdateメソッドを実行し終えた直後です。
//
// param value 次フレームまでに自殺するかどうか
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (void)setDead:(BOOL)value{ _bDead = value; }

//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
// フェーズ・カウンタ管理クラスを取得します。
//
// return フェーズ・カウンタ管理クラス
//*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
- (NCPhaseManager *)phaseManager{ return _mgrPhase; }

@end
